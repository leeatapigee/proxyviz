// Create a new directed graph
var g = new dagreD3.graphlib.Graph().setGraph({});
console.log('g=', JSON.stringify(g))

// Nodes and transitions from RFC 793
var nodes = {
{{{nodes}}}
};

// Add nodes to the graph, set labels, and style
console.log('process nodes')
Object.keys(nodes).forEach(function(node) {
  console.log('node', node)
  var value = nodes[node];
  value.label = value.description;
  value.rx = value.ry = 5;
  g.setNode(node, value);
});

console.log('process edges')

// Set up the edges
{{{edges}}}


console.log('edges complete')

// Create the renderer
var render = new dagreD3.render();

// Set up an SVG group so that we can translate the final graph.
var svg = d3.select("svg"),
    inner = svg.append("g");

// Set up zoom support
var zoom = d3.behavior.zoom().on("zoom", function() {
    console.log('d3.event (zoom)=', JSON.stringify(d3.event))
    if( !d3.event.translate[0] ) d3.event.translate[0]=100
    inner.attr("transform", "translate(" + d3.event.translate + ") " +
                                "scale(" + d3.event.scale + ")");
  });
svg.call(zoom);

/*
// set up drag support
//drag behavior, will bind later
var drag = d3.behavior
    .drag()
    //.origin(Object)
    .on("drag", function() {
      console.log('d3.event (drag)=', JSON.stringify(d3.event))
      inner.attr("transform", "translate(" + d3.event.translate + ") " +
                                  "scale(" + d3.event.scale + ")");
    });
*/

// Simple function to style the tooltip for the given node.
var styleTooltip = function(name, description) {
  return "<p class='name'>" + name + "</p><p class='description'>" + description + "</p>";
};

// Run the renderer. This is what draws the final graph.
render(inner, g);


inner.selectAll("g.node")
  .attr("title", function(v) { return styleTooltip(v, g.node(v).description) })
  .each(function(v) { $(this).tipsy({ gravity: "w", opacity: 1, html: true }); });


// Center the graph
var initialScale = 0.75;
zoom
  .translate([(svg.attr("width") - g.graph().width * initialScale) / 2, 20])
  .scale(initialScale)
  .event(svg);
svg.attr('height', g.graph().height * initialScale + 40);
